document.addEventListener('DOMContentLoaded', function() {
    // Form submission handling
    const optimizerForm = document.getElementById('optimizer-form');
    if (optimizerForm) {
        optimizerForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Show loading indicator
            const submitButton = document.querySelector('button[type="submit"]');
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
            submitButton.disabled = true;
            
            // Get the query from the form
            const queryInput = document.getElementById('query-input');
            const query = queryInput.value;
            
            // Get the options
            const options = {
                standardize_language: document.getElementById('standardize-language')?.checked || false,
                remove_pii: document.getElementById('remove-pii')?.checked || false,
                detect_bias: document.getElementById('detect-bias')?.checked || false,
                ethics_check: document.getElementById('ethics-check')?.checked || false,
                use_azure: false // Set to true if you have valid Azure credentials
            };
            
            // Make API call
            fetch('/api/optimize', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ query, options }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Display results
                document.getElementById('original-query').textContent = data.original_query;
                document.getElementById('optimized-query').textContent = data.optimized_query;
                
                // Update changes table
                const changesTable = document.getElementById('changes-table');
                changesTable.innerHTML = '';
                
                if (data.changes && data.changes.length > 0) {
                    data.changes.forEach(change => {
                        let badge;
                        switch(change.type) {
                            case 'Terminology':
                                badge = '<span class="badge bg-primary">Terminology</span>';
                                break;
                            case 'Privacy':
                                badge = '<span class="badge bg-warning">Privacy</span>';
                                break;
                            case 'Bias':
                                badge = '<span class="badge bg-danger">Bias</span>';
                                break;
                            default:
                                badge = '<span class="badge bg-secondary">Other</span>';
                        }
                        
                        const row = `
                            <tr>
                                <td>${badge}</td>
                                <td>${change.original}</td>
                                <td>${change.changed_to}</td>
                                <td>${change.reason}</td>
                            </tr>
                        `;
                        changesTable.innerHTML += row;
                    });
                } else {
                    changesTable.innerHTML = `
                        <tr>
                            <td colspan="4" class="text-center">No changes were needed for this query.</td>
                        </tr>
                    `;
                }
                
                // Show the results section
                document.getElementById('results-section').classList.remove('d-none');
                
                // Reset button
                submitButton.innerHTML = 'Optimize Query';
                submitButton.disabled = false;
                
                // Scroll to results
                document.getElementById('results-section').scrollIntoView({ behavior: 'smooth' });
            })
            .catch((error) => {
                console.error('Error:', error);
                
                // Show error message
                const resultsSection = document.getElementById('results-section');
                resultsSection.classList.remove('d-none');
                resultsSection.innerHTML = `
                    <div class="container">
                        <div class="alert alert-danger" role="alert">
                            <h4 class="alert-heading">Error Processing Query</h4>
                            <p>There was an error processing your query. Please try again later.</p>
                            <hr>
                            <p class="mb-0">Technical details: ${error.message}</p>
                        </div>
                    </div>
                `;
                
                // Reset button
                submitButton.innerHTML = 'Optimize Query';
                submitButton.disabled = false;
            });
        });
    }
    
    // Example query buttons
    const exampleButtons = document.querySelectorAll('.btn-example');
    exampleButtons.forEach(button => {
        button.addEventListener('click', function() {
            const query = this.getAttribute('data-query');
            const queryInput = document.getElementById('query-input');
            if (queryInput) {
                queryInput.value = query;
                // Scroll to the form
                queryInput.scrollIntoView({ behavior: 'smooth' });
                queryInput.focus();
            }
        });
    });
    
    // Load examples if on documentation page
    const exampleSection = document.getElementById('examples');
    if (exampleSection) {
        fetch('/api/examples')
        .then(response => response.json())
        .then(examples => {
            // You could automatically populate example tables if needed
            console.log('Examples loaded:', examples);
        })
        .catch(error => {
            console.error('Error loading examples:', error);
        });
    }
});
